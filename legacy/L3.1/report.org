#+TITLE: "Вычисление значений числовых функций на промежутке"

#+INCLUDE: ../title.org

* Аннотация

Данная лабораторная работа включает в себя вычисление значений функций в
некоторых точках на заданном промежутке. Эти точки могут быть
равноудалёнными или иметь шаг \Delta{}x.

{{{pagebr}}}

#+TOC: headlines 2

{{{pagebr}}}

* Теоретическая часть

Информация взята из материалов лекции.

** Значение функции на некоторых точках промежутка

Имея функцию \(y = f(x)\), на промежутке \([x_1, x_2]\) можно:

1. Выбрать N равномерно заданных точек.
2. Высчитать точки от x_1 до x_2 с помощью шага \Delta{}x.

Чтобы вычислить расстояние между данной точкой и следующей при N
равномерно заданных точек, используется формула:

\[\Delta x = \frac{x_2 - x_1}{N - 1}\]

Почему \(N - 1\)? Это можно показать на примере.

Возьмём \(N = 3\). Три равномерно заданные точки будут выглядеть
примерно так:

#+BEGIN_SRC asymptote :results silent :file tmp/N=3.png
import graph;

unitsize(1cm);
size(400);

dot((0, 0));
label("$x_1$", (0, 0), S);

dot((1, 0));
label("$x_3$", (1, 0), S);

dot((2, 0));
label("$x_2$", (2, 0), S);

label("$1$", (0, 0)--(1, 0), N);
label("$1$", (1, 0)--(2, 0), N);

xaxis("$x$", -0.5, 2.5);
yaxis("$y$", -0.5, 0.5);
#+END_SRC

#+RESULTS:
#+ATTR_ODT: :anchor as-char
[[file:tmp/N=3.png]]

Расстояние между ними показано на рисунке и равно 1. Значит, \(x_2 - x_1
= 2\). Подставим это значение в формулу \Delta{}x:

\[\Delta x = \frac{x_2 - x_1}{N - 1} = \frac{2}{2} = 1\]

Попробуем посчитать с N и сравним:

\[\Delta x = \frac{x_2 - x_1}{N} = \frac{2}{3}\]

Полученное значение не соответствует рисунку.

В случае, если нужно посчитать число точек N из расстояния \Delta{}x,
используется формула:

\[N = \left\lceil{\frac{x_2 - x_1}{\Delta x} + 1}\right\rceil\]

Необходимость прибавления единицы можно показать на рисунке:

#+BEGIN_SRC asymptote :results silent :file tmp/ceil.png
import graph;

unitsize(1cm);
size(400);

dot((0, 0));
label("$x_1$", (0, 0), S);

dot((0.45, 0));

dot((0.90, 0));
label("$N$", (0.90, 0), N);

dot((1, 0));
label("$x_2$", (1, 0), S);

dot((1.35, 0));
label("$N + 1$", (1.35, 0), N);

xaxis("$x$", -0.25, 1.6);
yaxis("$y$", -0.5, 0.5);
#+END_SRC

#+RESULTS:
#+ATTR_ODT: :anchor as-char
[[file:tmp/ceil.png]]

Крайняя справа точка зачтётся и уйдёт в конец промежутка.

* Постановка задач

Высчитать значение следующих функций в заданных точках:

|  № | Функция | Точки     |
| 1. | sin(x)  | N         |
| 2. | sin(x)  | \Delta{}x |
| 3. | cos(x)  | N         |
| 4. | cos(x)  | \Delta{}x |
| 5. | ln(x)   | N         |
| 6. | ln(x)   | \Delta{}x |

* Практическая часть

{{{specs}}}

** Общий алгоритм решения для N равномерно заданных точек

#+BEGIN_SRC plantuml :results silent :file tmp/N.png
start

repeat
:Ввод x1, x2 и N;
repeat while (Функция существует\nна всём промежутке?) is (нет)

:Вычисление dx из N;

:x = x1;
:i = 0;

repeat
  :Вывод координаты x;

  if (Функция существует в т. x?) is (да) then
    :Вывод значения функции;
  else (нет)
    :Вывод "не сущ.";
  endif

  :x += dx;

  :i++;
repeat while (i < N?) is (да)
stop
#+END_SRC

#+RESULTS:
#+ATTR_ODT: :anchor as-char
[[file:tmp/N.png]]

** Общий алгоритм решения для \Delta{}x

#+BEGIN_SRC plantuml :results silent :file tmp/dx.png
start

repeat
:Ввод x1, x2 и dx;
repeat while (Функция существует\nна всём промежутке?) is (нет)

:Вычисление N из dx;

:x = x1;
:i = 0;

repeat
  if (x > x2?) is (да) then
    :x = x2;
  endif

  if (Функция существует в т. x?) is (да) then
    :Вывод значения функции;
  else (нет)
    :Вывод "не сущ.";
  endif

  :x += dx;

  :i++;
repeat while (i < N?) is (да)

stop
#+END_SRC

#+RESULTS:
#+ATTR_ODT: :anchor as-char
[[file:tmp/dx.png]]

** Значение sin(x) в N равномерно заданных точках

#+INCLUDE: Z3.1_1.cpp src cpp

#+ATTR_ODT: :anchor as-char
[[./img/Z3.1_1.png]]

** Значение sin(x) в точках с шагом \Delta{}x

#+INCLUDE: Z3.1_2.cpp src cpp

#+ATTR_ODT: :anchor as-char
[[./img/Z3.1_2.png]]

** Значение cos(x) в N равномерно заданных точках

#+INCLUDE: Z3.1_3.cpp src cpp

#+ATTR_ODT: :anchor as-char
[[./img/Z3.1_3.png]]

** Значение cos(x) в точках с шагом \Delta{}x

#+INCLUDE: Z3.1_4.cpp src cpp

#+ATTR_ODT: :anchor as-char
[[./img/Z3.1_4.png]]

** Значение ln(x) в N равномерно заданных точках

#+INCLUDE: Z3.1_5.cpp src cpp

#+ATTR_ODT: :anchor as-char
[[./img/Z3.1_5.png]]

** Значение ln(x) в точках с шагом \Delta{}x

#+INCLUDE: Z3.1_6.cpp src cpp

#+ATTR_ODT: :anchor as-char
[[./img/Z3.1_6.png]]

* Выводы

Написание данных программ помогло закрепить теорию, изученную на лекции,
и получить представление об алгоритме решения задач подобного типа.
