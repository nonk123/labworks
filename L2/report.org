#+TITLE: "Попадание точки в заданную мишень"

#+INCLUDE: ../title.org

* Аннотация

Данная лабораторная работа описывает алгоритмы проверки попадания
точки в мишень. В коде программ используется шаблонный цикл ввода и
математические формулы для заданной мишени.

{{{pagebr}}}

#+TOC: headlines 2

{{{pagebr}}}

* Теоретическая часть

** Определение асимптотической сложности алгоритма

Асимптотическая сложность алгоритма (или производительность)
определяется функцией, указывающей насколько ухудшается скорость работы
алгоритма с усложнением поставленной задачи.

Эта функция записывается так:

\[O(f)\]

Например, имея функцию:

\[O(n^2)\]

Мы определяем, что в зависимости от роста входных величин время работы
программы возрастает квадратично.

** Пять правил для расчёта сложности алгоритма

1. Если для некоторой математической функции f алгоритму необходимо
   выполнить некоторое действие $f(n)$ раз, то ему понадобится $O(f(n))$
   шагов.
2. Если некоторый алгоритм выполняет одну операцию со сложностью
   $O(f(n))$, а затем - вторую с $O(g(n))$, то общая сложность такого
   алгоритма равна $O(f(n) + g(n))$.
3. Если алгоритму необходимо сделать $O(f(n) + g(n))$ шагов и при этом
   область значений у $f(n)$ значительно больше, чем у $g(n)$, то
   сложность такого алгоритма равна $O(f(n))$.
4. Если алгоритму внутри каждого шага $O(f(n))$ какой-то одной операции
   приходится выполнять ещё $O(g(n))$ шагов другой операции, то
   производительность такого алгоритма равна $O(f(n) \cdot g(n))$.
5. Постоянными множителями и константами можно пренебрегать: $O(cf(n))
   \equiv O(f(n))$.

* Постановка задач

При заданной точке $(x, y)$ определить, происходит ли попадание в
следующие мишени:

1. Внутри прямоугольника в точке $(0, 0)$.
   #+BEGIN_SRC asymptote :file tmp/expl1.png
     import graph;

     unitsize(1cm);
     size(400);

     draw((0, 0)--(0.8, 0)--(0.8, 0.5)--(0, 0.5)--cycle);

     label("$a$", (0, 0.5)--(0.8, 0.5), N);
     label("$b$", (0.8, 0)--(0.8, 0.5), E);

     xaxis("$x$", -0.5, 1);
     yaxis("$y$", 0, 0.8);
   #+END_SRC
2. Внутри прямоугольника в точке $(x_0, y_0)$
   #+BEGIN_SRC asymptote :file tmp/expl2.png
     import graph;

     unitsize(1cm);
     size(400);

     draw((0.2, 0.1)--(0.7, 0.1)--(0.7, 0.6)--(0.2, 0.6)--cycle);

     draw((0, 0.1)--(0.2, 0.1), dashed);
     draw((0.2, 0)--(0.2, 0.1), dashed);

     label("$x_0$", (0.2, 0), S);
     label("$y_0$", (0, 0.1), W);

     label("$a$", (0.2, 0.6)--(0.7, 0.6), N);
     label("$b$", (0.7, 0.1)--(0.7, 0.6), E);

     xaxis("$x$", -0.5, 1);
     yaxis("$y$", 0, 1);
   #+END_SRC
3. Внутри окружности с центром в начале координат.
   #+BEGIN_SRC asymptote :file tmp/expl3.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0, 0), 0.8));
     dot((0, 0));

     path r = (0.0, 0.0)--(0.8 * cos(pi / 4), 0.8 * sin(pi / 4));
     draw(r, dashed);
     label("$r$", r);

     xaxis("$x$", -1, 1);
     yaxis("$y$", -1, 1);
   #+END_SRC
4. Внутри окружности с центром в точке $(x_0, y_0)$.
   #+BEGIN_SRC asymptote :file tmp/expl4.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0.4, 0.4), 0.8));
     dot((0.4, 0.4));

     path r = (0.4, 0.4)--(0.4 + 0.8*cos(pi / 4), 0.4 + 0.8*sin(pi / 4));
     draw(r, dashed);
     label("$r$", r);

     draw((0.4, 0)--(0.4, 0.4), dashed);
     draw((0, 0.4)--(0.4, 0.4), dashed);

     label("$x_0$", (0.4, 0), S);
     label("$y_0$", (0, 0.4), W);

     xaxis("$x$", -0.5, 1.5);
     yaxis("$y$", -0.5, 1.5);
   #+END_SRC
5. За пределами окружности с радиусом r_1 и в пределах окружности с
   радиусом r_2. Обе окружности имеют центр в начале координат.
   #+BEGIN_SRC asymptote :file tmp/expl5.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0, 0), 0.8));
     draw(circle((0, 0), 0.5));
     dot((0, 0));

     path r1 = (0.0, 0.0)--(0.5 * cos(pi / 6), 0.5 * sin(pi / 6));
     draw(r1, dashed);
     label("$r_1$", r1);

     path r2 = (0.0, 0.0)--(0.8 * cos(pi / 3), 0.8 * sin(pi / 3));
     draw(r2, dashed);
     label("$r_2$", r2);

     xaxis("$x$", -1, 1);
     yaxis("$y$", -1, 1);
   #+END_SRC
6. То же самое, но обе окружности имеют центр в точке $(x_0, y_0)$.
   #+BEGIN_SRC asymptote :file tmp/expl6.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0.4, 0.4), 0.8));
     draw(circle((0.4, 0.4), 0.5));
     dot((0.4, 0.4));

     path r1 = (0.4, 0.4)--(0.4 + 0.5 * cos(pi / 6), 0.4 + 0.5 * sin(pi / 6));
     draw(r1, dashed);
     label("$r_1$", r1);

     path r2 = (0.4, 0.4)--(0.4 + 0.8 * cos(pi / 3), 0.4 + 0.8 * sin(pi / 3));
     draw(r2, dashed);
     label("$r_2$", r2);

     draw((0.4, 0)--(0.4, 0.4), dashed);
     draw((0, 0.4)--(0.4, 0.4), dashed);

     label("$x_0$", (0.4, 0), S);
     label("$y_0$", (0, 0.4), W);

     xaxis("$x$", -0.5, 1.5);
     yaxis("$y$", -0.5, 1.5);
   #+END_SRC
7. Выше функции $f(x)$ и ниже функции $g(x)$. В этой работе $f(x) = $a
   x^2$ и $g(x) = kx + b$
   #+BEGIN_SRC asymptote :file tmp/expl7.png
     import graph;
     import patterns;

     unitsize(1cm);
     size(400);

     real f(real x) {
       return 0.8 * x^2;
     }

     real g(real x) {
       return 0.5*x + 1;
     }

     path a = graph(f, -2, 2);
     path b = graph(g, -2.5, 2.5);

     draw(a);
     draw(b);

     label("$y = f(x)$", a, N);
     label("$y = g(x)$", b, NW);

     add("hatch", hatch());
     fill(buildcycle(a, b), pattern("hatch"));

     xaxis("$x$");
     yaxis("$y$");
   #+END_SRC

* Практическая часть

Входные данные для каждого алгоритма состоят из координат x и y выстрела
и параметров мишени.

Выходные данные для каждого алгоритма стандартные: сообщение о попадании
или промахе и процент попаданий.

Предполагается, что процент попаданий считается для всех мишеней, а не
для только что введённой.

Обобщённая блок-схема алгоритмов, предложенных ниже:

#+BEGIN_SRC plantuml :file tmp/general_diagram.png
start
repeat
  :Ввод параметров
  мишени;
  if (Запрошен выход?) then (да)
    break
  endif
  if (Введены корректные\nзначения?) then (да)
    repeat
      :Ввод x и y;
      if (Запрошен выход?) then (да)
        break
      endif
      if (Выстрел попал?) then (да)
        :Вывод "Попал";
        :Увеличение счётчика
        попаданий;
      else
        :Вывод "Промахнулся";
        :Увеличение счётчика
        промахов;
      endif
      :Вывод процента
      попаданий;
    repeat while (Бесконечный\nцикл)
  endif
repeat while (Бесконечный\nцикл)
stop
#+END_SRC

Запрос выхода зависит от типа входных данных. К примеру, отрезки не
могут иметь отрицательную длину. Ввод полностью некорректных данных
приводит к выходу из цикла.

** Прямоугольная мишень в точке (0, 0)

*** Описание

Частный случай мишени №2 с $x_0 = y_0 = 0$.

Параметры мишени: стороны a и b прямоугольника.

*** Используемые формулы

Имея прямоугольник со сторонами a и b, внутри которого отмечена точка
$(x, y)$:

#+BEGIN_SRC asymptote :file tmp/Z2_1_proof.png
import graph;

unitsize(1cm);
size(400);

draw((0, 0)--(1.6, 0)--(1.6, 1)--(0, 1)--cycle);

label("$a$", (0, 1)--(1.6, 1), N);
label("$b$", (1.6, 0)--(1.6, 1), E);

dot((1, 0.6));
label("$(x, y)$", (1, 0.6), N);

draw((0.0, 0.6)--(1, 0.6), dashed);
label("$y$", (0.0, 0.6), W);

draw((1, 0.0)--(1, 0.6), dashed);
label("$x$", (1, 0.0), S);

xaxis("$x$", -0.2, 1.8);
yaxis("$y$", -0.2, 1.2);
#+END_SRC

Можно заметить, что $0 \le x \le a$ и $0 \le y \le b$.

Представим это в виде логического выражения:

\[x \ge 0 \land x \le a \land y \ge 0 \land y \le b\]

Которое истино тогда и только тогда, когда точка $(x, y)$ находится
внутри прямоугольника со сторонами a и b.

*** Программная реализация

#+INCLUDE: Z2_1.cpp src cpp

*** Пример работы программы

[[./img/Z2_1.png]]

** Прямоугольная мишень в точке (x_0, y_0)

*** Описание

Параметры мишени: стороны a и b прямоугольника, координата его левого
нижнего угла - $(x, y)$.

*** Используемые формулы

По аналогии с №1:

#+BEGIN_SRC asymptote :file tmp/Z2_2_proof.png
import graph;

unitsize(1cm);
size(400);

draw((0.2, 0.2)--(1.8, 0.2)--(1.8, 1.2)--(0.2, 1.2)--cycle);

draw((0.2, 0)--(0.2, 0.2), dashed);
label("$x_0$", (0.2, 0), S);

draw((0, 0.2)--(0.2, 0.2), dashed);
label("$y_0$", (0, 0.2), W);

label("$a$", (0.2, 1.2)--(1.8, 1.2), N);
label("$b$", (1.8, 0.2)--(1.8, 1.2), E);

dot((1.2, 0.8));
label("$(x, y)$", (1.2, 0.8), N);

draw((0.2, 0.8)--(1.2, 0.8), dashed);
label("$y$", (0.2, 0.8), W);

draw((1.2, 0.2)--(1.2, 0.8), dashed);
label("$x$", (1.2, 0.2), S);

xaxis("$x$", -0.2, 2);
yaxis("$y$", -0.2, 1.4);
#+END_SRC

Видим, что $x_0 \le x \le x_0 + a$ и $y_0 \le y \le y_0 + b$. Чтобы было
попадание, данное условие должно выполняться.

*** Программная реализация

#+INCLUDE: Z2_2.cpp src cpp

*** Пример работы программы

[[./img/Z2_2.png]]

** Окружность с центром в начале координат

*** Описание

Частный случай мишени №4 с $y_0 = x_0 = 0$.

Параметры мишени: радиус r.

*** Используемые формулы

По определению окружности (из материалов лекции):

#+BEGIN_CENTER
Окружность есть геометрическое место точек, равноудалённых от данной
точки, называемой центром окружности.
#+END_CENTER

Следует, что точка $(x, y)$ должна быть удалена от центра окружности на
расстояние не больше радиуса r.

Используя формулу расстояния между двумя точками (из материалов лекции):

\[l = \sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}\]

Подставим в неё центр окружности $(0, 0)$ и заданную точку $(x, y)$:

\[l = \sqrt{x^2 + y^2}\]

Зная это расстояние, можно сравнить его с радиусом. Если выполняется
условие $l \le r$, то выстрел попал.

*** Программная реализация

#+INCLUDE: Z2_3.cpp src cpp

*** Пример работы программы

[[./img/Z2_3.png]]

** Окружность с центром в точке (x_0, y_0)

*** Описание

Параметры мишени: центр $(x_0, y_0)$ и радиус r.

*** Используемые формулы

По аналогии с мишенью №3 подставляем центр окружности $(x_0, y_0)$ и
точку $(x, y)$ в формулу расстояния между двумя точками:

\[l = \sqrt{(x - x_0)^2 + (y - y_0)^2}\]

Если $l \le r$, то выстрел попал.

*** Программная реализация

#+INCLUDE: Z2_4.cpp src cpp

*** Пример работы программы

[[./img/Z2_4.png]]

** Две окружности с центрами в начале координат

*** Описание

Параметры мишени: радиус внутренней окружности r_1 и радиус внешней - r_2.

*** Используемые формулы

По аналогии с мишенью №3 проверка попадания происходит методом сравнения
радиусов двух окружностей.

Выстрел попадает, если точка находится за пределами окружности с
радиусом r_1 и внутри окружности с радиусом r_2.

По формуле расстояния между двумя точками должны выполняться условия:

\[\sqrt{x^2 + y^2} \ge r_1\]

И

\[\sqrt{x^2 + y^2} \le r_2\]

*** Программная реализация

#+INCLUDE: Z2_5.cpp src cpp
*** Пример работы программы

[[./img/Z2_5.png]]

** Две окружности с центрами в точке (x_0, y_0)

*** Описание

Параметры мишени: радиус внутренней окружности r_1 и радиус внешней -
r_2, точка $(x_0, y_0)$.

*** Используемые формулы

В условия из мишени №5 подставляем формулу расстояния между двумя
точками, учитывая центры данных окружностей:

\[\sqrt{(x^2 - {x_0}^2) + (y^2 - {y_0}^2)} \ge r_1\]

И

\[\sqrt{(x^2 - {x_0}^2) + (y^2 - {y_0}^2)} \le r_2\]

*** Программная реализация

#+INCLUDE: Z2_6.cpp src cpp

*** Пример работы программы

[[./img/Z2_6.png]]

** Функции f(x) и g(x)

*** Описание

Параметры мишени: коэффицент a для $f(x)$, коэффицент k и смещение b для
$g(x)$.

*** Используемые формулы

\[f(x) = a x^2\]

\[g(x) = kx + b\]

Обе функции определены для любого x.

Чтобы точка $(x, y)$ "попала", должны выполняться условия:

\[y \ge f(x)\]

И

\[y \le g(x)\]

*** Программная реализация

#+INCLUDE: Z2_7.cpp src cpp

*** Пример работы программы

[[./img/Z2_7.png]]

* Вывод

В результате выполнения данной лабораторной работы я вывел некоторые
формулы нахождения соприкосновения точки с мишенью и, проиллюстрировав,
понял их суть.
