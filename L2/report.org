#+TITLE: "Попадание точки в заданную мишень"

#+INCLUDE: ../title.org

* Аннотация

Данная лабораторная работа описывает алгоритмы проверки попадания
точки в мишень. В коде программ используется шаблонный цикл ввода и
математические формулы для заданной мишени.

{{{pagebr}}}

#+TOC: headlines 2

{{{pagebr}}}

* Теоретическая часть

** Определение асимптотической сложности алгоритма

Асимптотическая сложность алгоритма (или производительность)
определяется функцией, указывающей, насколько ухудшается работа
алгоритма с усложнением поставленной задачи.

Такая функция записывается как:

\[O(f)\]

Например, имея функцию:

\[O(n^2)\]

Мы определяем, что в зависимости от роста входных величин время работы
программы возрастает квадратично.

** Пять правил для расчёта сложности алгоритма

1. Если для некоторой математической функции f алгоритму необходимо
   выполнить некоторое действие $f(n)$ раз, то ему понадобится $O(f(n))$
   шагов.
2. Если некоторый алгоритм выполняет одну операцию со сложностью
   $O(f(n))$, а затем - вторую с $O(g(n))$, то общая сложность такого
   алгоритма равна $O(f(n) + g(n))$.
3. Если алгоритму необходимо сделать $O(f(n) + g(n))$ шагов и при этом
   область значений у $f(n)$ значительно больше, чем у $g(n)$, то
   сложность такого алгоритма равна $O(f(n))$.
4. Если алгоритму внутри каждого шага $O(f(n))$ какой-то одной операции
   приходится выполнять ещё $O(g(n))$ шагов другой операции, то
   производительность такого алгоритма равна $O(f(n) \cdot g(n))$.
5. Постоянными множителями или константами можно пренебрегать. $O(cf(n))
   \equiv O(f(n))$

* Постановка задач

При заданной точке $(x, y)$ определить, происходит ли попадание в
следующие мишени:

1. Внутри прямоугольника в начале координат.
   #+BEGIN_SRC asymptote :file tmp/expl1.png
     import graph;

     unitsize(1cm);
     size(400);

     draw((0, 0)--(0.8, 0)--(0.8, 0.5)--(0, 0.5)--cycle);

     label("$a$", (0, 0)--(0.8, 0));
     label("$b$", (0, 0)--(0, 0.5), W);

     xaxis("$x$", -0.5, 1);
     yaxis("$y$", 0, 0.8);
   #+END_SRC
2. Внутри прямоугольника с началом в точке $(x_0, y_0)$
   #+BEGIN_SRC asymptote :file tmp/expl2.png
     import graph;

     unitsize(1cm);
     size(400);

     draw((0.2, 0.1)--(0.7, 0.1)--(0.7, 0.6)--(0.2, 0.6)--cycle);

     label("$a$", (0.2, 0.1)--(0.7, 0.1));
     label("$b$", (0.2, 0.1)--(0.2, 0.6), W);

     draw((0, 0.1)--(0.2, 0.1), dashed);
     draw((0.2, 0)--(0.2, 0.1), dashed);

     label("$x_0$", (0.2, 0), S);
     label("$y_0$", (0, 0.1), W);

     xaxis("$x$", -0.5, 1);
     yaxis("$y$", 0, 1);
   #+END_SRC
3. Внутри окружности с центром в начале координат.
   #+BEGIN_SRC asymptote :file tmp/expl3.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0, 0), 0.8));
     dot((0, 0));

     path r = (0.0, 0.0)--(0.8 * cos(pi / 4), 0.8 * sin(pi / 4));
     draw(r, dashed);
     label("$r$", r);

     xaxis("$x$", -1, 1);
     yaxis("$y$", -1, 1);
   #+END_SRC
4. Внутри окружности с центром в точке $(x_0, y_0)$.
   #+BEGIN_SRC asymptote :file tmp/expl4.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0.4, 0.4), 0.8));
     dot((0.4, 0.4));

     path r = (0.4, 0.4)--(0.4 + 0.8*cos(pi / 4), 0.4 + 0.8*sin(pi / 4));
     draw(r, dashed);
     label("$r$", r);

     draw((0.4, 0)--(0.4, 0.4), dashed);
     draw((0, 0.4)--(0.4, 0.4), dashed);

     label("$x_0$", (0.4, 0), S);
     label("$y_0$", (0, 0.4), W);

     xaxis("$x$", -0.5, 1.5);
     yaxis("$y$", -0.5, 1.5);
   #+END_SRC
5. За пределами окружности с радиусом r_1 и в пределах окружности с
   радиусом r_2. Обе окружности имеют центр в начале координат.
   #+BEGIN_SRC asymptote :file tmp/expl5.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0, 0), 0.8));
     draw(circle((0, 0), 0.5));
     dot((0, 0));

     path r1 = (0.0, 0.0)--(0.5 * cos(pi / 6), 0.5 * sin(pi / 6));
     draw(r1, dashed);
     label("$r_1$", r1);

     path r2 = (0.0, 0.0)--(0.8 * cos(pi / 3), 0.8 * sin(pi / 3));
     draw(r2, dashed);
     label("$r_2$", r2);

     xaxis("$x$", -1, 1);
     yaxis("$y$", -1, 1);
  #+END_SRC
6. То же самое, но обе окружности имеют центр в точке $(x_0, y_0)$.
   #+BEGIN_SRC asymptote :file tmp/expl6.png
     import graph;

     unitsize(1cm);
     size(400);

     draw(circle((0.4, 0.4), 0.8));
     draw(circle((0.4, 0.4), 0.5));
     dot((0.4, 0.4));

     path r1 = (0.4, 0.4)--(0.4 + 0.5 * cos(pi / 6), 0.4 + 0.5 * sin(pi / 6));
     draw(r1, dashed);
     label("$r_1$", r1);

     path r2 = (0.4, 0.4)--(0.4 + 0.8 * cos(pi / 3), 0.4 + 0.8 * sin(pi / 3));
     draw(r2, dashed);
     label("$r_2$", r2);

     draw((0.4, 0)--(0.4, 0.4), dashed);
     draw((0, 0.4)--(0.4, 0.4), dashed);

     label("$x_0$", (0.4, 0), S);
     label("$y_0$", (0, 0.4), W);

     xaxis("$x$", -0.5, 1.5);
     yaxis("$y$", -0.5, 1.5);
  #+END_SRC


* Практическая часть

pfft
