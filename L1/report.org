#+TITLE: "Выполнение простейших программ на языке Си без условий и циклов"

#+INCLUDE: ../title.org

* Аннотация

Данная лабораторная работа описывает решение математических и физических
задач на языке программирования Си.

{{{pagebr}}}

#+TOC: headlines 2

{{{pagebr}}}

* Теоретическая часть

** Этапы создания компьютерных программ

Процесс создания компьютерных программ для решения той или иной задачи
состоит из следующих этапов:

#+BEGIN_SRC ditaa :file tmp/steps.png
  /----------\     /-----------------------\     /----------\     /-----------\     /---------\
  |  Задача  | --> | Математическая модель | --> | Алгоритм | --> | Программа | --> | Решение |
  \----------/     \-----------------------/     \----------/     \-----------/     \---------/
       ^                      ^                       ^                 ^                ^
       |                      |                       |                 |                |
  /----+-----\     /----------+-----------------------+-----------------+----------------+----\
  | Заказчик |     |                              Разработчик                                 |
  \----------/     \--------------------------------------------------------------------------/
#+END_SRC

** Определение алгоритма

Алгоритм A преобразует набор данных D в результат R. Это можно записать
как функцию:

\[A(D) = R\]

Для алгоритма, как и для функции, справедливо следующее утверждение:
каждому элементу из множества D соответствует только один элемент
множества R. Схематически это можно изобразить так:

#+BEGIN_SRC ditaa :file tmp/algorithm.png
  /----\     /----\
  |    |     |    |
  | d1 +---->| r1 |
  |    |     |    |
  +----+     +----+
  |    |     |    |
  | d2 +---->|    |
  |    |     |    |
  +----+     | r2 |
  |    |     |    |
  | d3 +---->|    |
  |    |     |    |
  \----/     \----/
#+END_SRC

Существуют три формы записи алгоритма:
1. Естественно-разговорный язык.
2. Блок-схемы, UML-диаграммы.
3. Языки программирования.

Вне зависимости от формы записи алгоритм требует наличие исполнителя
(например, ЭВМ).

Алгоритмы делятся на численные (работающие с числовыми данными) и
логические (с нечисловыми).

** Общие свойства алгоритмов

1. Дискретность. Любой алгоритм - процесс последовательного построения,
   идущий в дискретном времени по определённому предписанию, называемому
   программой.
2. Направленность. Любой алгоритм обязательно останавливается через
   _конечное_ количество шагов, о чём свидетельствует достижение
   результата.
3. Массовость. Любой алгоритм служит для решения целого класса задач,
   причём начальная совокупность величин может выбираться из некоторого
   начального множества.
4. Элементарность шагов. Получение следующей величины из предыдущей
   должно быть простым, локальным, исполнимым.
5. Правильность. Алгоритм должен обеспечивать получение именно того
   результата, который требует постановка задачи.
6. Эффективность. Если для решения поставленной задачи предлагается
   несколько различных алгоритмов, то выбрать предлагается тот, который
   потребует наименьшей памяти или наименьшего времени.

* Постановка задач

1. Написать программу приветствия пользователя.
2. Написать программу, использующую одну переменную.
3. Написать программу ввода переменной с проверкой введённого значения.
4. Расчитать высоту подъёма тела в определённый момент времени с
   заданной начальной скоростью.
5. Продемонстрировать инкрементные и декрементные операторы языка Си.
6. Решить треугольник по трём сторонам.
7. Необходимо решить треугольник по двум сторонам и углу между ними.
8. Сколько последовательных чисел начиная с 1 нужно сложить, чтобы их
   сумма была равна заданному?
9. Написать программу перевода температуры по Фаренгейту в
   температуру по Цельсию и обратно по формуле:
   \[t_C = \frac{5}{9} \cdot (t_F - 32^{\circ})\]
10. Необходимо расчитать координату тела в заданный момент времени при
    условии, что тело брошено с начальной скоростью V_0, под углом
    \alpha к горизонту. Сопротивлением воздуха принебречь.
11. Расстояние S_1 тело преодолело за время t_1, а дальнейшее расстояние
    S_2 - за время t_2. Найти среднюю скорость движения тела на всём
    пути.
12. Пусть известна масса земли $M = 5.69 \cdot 10^{24} кг$ и её радиус
    $R = 6.37 \times 10^6 м$. Также известна масса спутника и период его
    обращения вокруг Земли. Необходимо найти высоту орбиты спутника за
    заданный период.
13. Маятник колеблется по закону $x(t) = a \sin{\omega{}t +
    \phi}$. \omega известна. Известно, что в начальный момент времени
    координата маятника положительна и в k раз меньше амплитуды a. В
    момент времени t_1 значение $x = a_1$. Определить закон изменения
    амплитуды.
14. Мяч бросают без начальной скорости вертикально вниз с высоты h. Он
    долетает до пола и абсолютно упруго отскакивает от него. Определить
    высоту мяча относительно пола в заданный момент времени.

* Практическая часть

Программная реализация каждого из алгоритмов находится в отдельном
проекте Dev-C++, архив с которыми сдаётся вместе с отчётом. Название
проекта соответствует номеру лабораторной работы и задания. Разработчик
данных программ - {{{author}}}.

Характеристики компьютера, на котором были запущены программы:
- Операционная система: Linux 5.4.0-52-generic x86\under{}64.
- ОЗУ: 800 MHz, 2 GB (2x1024 MB).
- ЦП: Pentium® Dual-Core CPU T4500 @ 2.30GHz
- Видеокарта: Mobility Radeon HD 4530/4570/545v.
- Компилятор: g++ 9.3.0.
- Подключена клавиатура и мышь.

Для предотвращения ошибок компиляции на ОС Linux используется следующий
заголовок:

#+INCLUDE: ../portability.hpp src cpp

** Программа приветствия пользователя

*** Описание

Входные данные: отсутствуют.

Выходные данные: приветствие.

Исключительные ситуации отсутствуют.

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_1.png
start
:Вывод приветствия;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_1.cpp src cpp

*** Пример работы программы

[[./img/Z1_1.png]]

** Программа с одной переменной

*** Описание

Входные данные: возраст пользователя.

Выходные данные: сообщение, включающее возраст пользователя.

Исключительные ситуации отсутствуют.

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_2.png
start
:Начало диалога
с пользователем;
:Ввод возраста;
:Вывод сообщения;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_2.cpp src cpp

*** Пример работы программы

#+CAPTION: Введены корректные данные
[[./img/Z1_2_correct.png]]

#+CAPTION: Ввод данных привёл к переполнению
[[./img/Z1_2_overflow.png]]

** Ввод переменной с проверкой

*** Описание

Входные данные: возраст пользователя.

Выходные данные: сообщение, включающее возраст пользователя.

Исключительные ситуации отсутствуют.

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_3.png
start
:Начало диалога
с пользователем;
repeat
  :Ввод возраста во
  временную переменную tmp;
repeat while (tmp > 0 и tmp <= 100?) is (нет)
->да;
:Возраст = tmp;
:Вывод сообщения;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_3.cpp src cpp

*** Пример работы программы

#+CAPTION: Два раза введены некорректные данные
[[./img/Z1_3_twice.png]]

#+CAPTION: Введены корректные данные с первого раза
[[./img/Z1_3_first_try.png]]

** Расчёт высоты подъёма тела

*** Описание

Входные данные заданы в коде: начальная скорость тела и время.

Выходные данные: высота подъёма тела.

Исключительные ситуации отсутствуют.

*** Использованные формулы

Из материалов лекции:

\[h = Vt - \frac{gt^2}{2}\]

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_4.png
start
:Расчёт высоты тела
по заданной формуле;
:Вывод;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_4.cpp src cpp

*** Пример работы программы

#+CAPTION: V = 10 м/с; t = 1 с
[[./img/Z1_4.png]]

** Пример использования инкрементных и декрементных операторов

*** Описание

Входные данные: целочисленные переменные =i= и =j=.

Выходные данные: значения переменных =n=, =m=, =i= и =j= после
преобразований.

Исключительные ситуации отсутствуют.

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_5.png
start
:Ввод i;
:n = i++;
:Вывод n и i;
:Ввод j;
:m = ++j;
:Вывод m и j;
:n = ~--i * i--;
:Вывод n и i;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_5.cpp src cpp

*** Пример работы программы

#+CAPTION: i = 3; j = 3
[[./img/Z1_5.png]]

** Решение треугольника по трём его сторонам

*** Описание

Входные данные: стороны a, b и c треугольника.

Выходные данные: \angle{}A, \angle{}B и \angle{}C в градусах и радианах,
площадь треугольника и его периметр.

Исключительные ситуации отсутствуют. Выполняется проверка введённых
сторон: чтобы треугольник существовал, сумма любых двух сторон должна
быть больше третьей.

*** Использованные формулы

Формулы взяты из материалов лекции.

Углы \angle{}A, \angle{}B и \angle{}C:

\[\angle A = \arccos{\frac{b^2 + c^2 - a^2}{2bc}}\]

\[\angle B = \arccos{\frac{a^2 + c^2 - b^2}{2ac}}\]

\[\angle C = \pi - (\angle A + \angle B)\]

Перевод в градусы:

\[\angle A_d = \frac{\angle A_r \cdot 180^{\circ}}{\pi}\]

И т.д. с \angle{}B и \angle{}C

Площадь:

\[S = \frac{ab\sin{\angle C}}{2}\]

Периметр:

\[P = a + b + c\]

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_6.png
start
repeat
:Ввод сторон a, b и c;
repeat while (Треугольник существует?) is (нет)
->да;
:Расчёт углов A, B и C в рад.;
:Перевод в градусы;
:Расчёт периметра и площади;
:Вывод;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_6.cpp src cpp

*** Пример работы программы

#+CAPTION: a = 2; b = 3; c = 4. Треугольник существует.
[[./img/Z1_6_good.png]]

#+CAPTION: a = 1; b = 2; c = 3. Треугольник не существует.
[[./img/Z1_6_bad.png]]

** Решение треугольника по двум сторонам и углу между ними

*** Описание

Входные данные: стороны a и b и \angle{}C между ними в градусах.

Выходные данные: сторона c, \angle{}A и \angle{}B в градусах и радианах,
\angle{}C в градусах, периметр и площадь треугольника.

Исключительные ситуации отсутствуют. Производится проверка входных
данных: длины сторон a и b не могут быть меньше или равными нулю, а
$0^{\circ} < C < 360^{\circ}$.

*** Использованные формулы

Сторона c:

\[c = \sqrt{a^2 + b^2 - 2ab \cos{\angle C}}\]

Перевод в радианы:

\[\angle C_r = \frac{\angle C_d \cdot \pi}{180^{\circ}}\]

Далее используются формулы из задания №6.

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_7.png
start
repeat
:Ввод a, b и угла
C в градусах;
repeat while (a > 0 и b > 0\nи C > 0 и C < 360?) is (нет)
->да;
:Перевод угла C в рад.;
:Расчёт стороны c;
:Расчёт углов A и B в рад.;
:Перевод в градусы;
:Расчёт площади и периметра;
:Вывод;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_7.cpp src cpp

*** Пример работы программы

#+CAPTION: a = 2; b = 3; \angle{}C = 104^{\circ}. Сначала произведён некорректный ввод.
[[./img/Z1_7.png]]

** Сумма чисел от 1 до N

*** Описание

Входные данные: искомая сумма E - число от 1 до 65535.

Выходные данные: число N такое, что сумма чисел S от 1 до N
удовлетворяет условию: $E \le S < E + N$.

Исключительные ситуации отсутствуют. Если число E не является суммой
чисел от 1 до N, то появляется остаток. Отсюда и следует условие S.

*** Использованные формулы

Используя формулу суммы арифметической прогрессии:

\[S_n = \frac{n(a_1 + a_n)}{2}\]

Можно найти сумму чисел от 1 до n по следующей формуле:

\[S_n = \frac{n(1 + n)}{2}\]

Выразим n:

\[2S_n = n + n^2\]

И решим квадратное уравнение:

\[n^2 + n - 2S_n = 0\]

\[D = 1 + 8S_n\]

\[n_1 = \frac{\sqrt{1 + 8S_n} - 1}{2}\]

\[n_2 = \frac{-\sqrt{1 + 8S_n} - 1}{2}\]

n_2 - посторонний корень, т.к. искомая сумма не может быть
отрицательной. n_1 - искомое значение n.

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_8.png
start
repeat
:Ввод искомой
суммы в tmp;
repeat while (tmp > 0 и tmp <= 65535?) is (нет)
->да;
:E = tmp;
:Вычисляем N;
:Подставляем N,
чтобы получить S;
:Вывод S;
if (S > E?) then (да)
  :Вывод остатка;
endif
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_8.cpp src cpp

*** Пример работы программы

#+CAPTION: Введено число без остатка
[[./img/Z1_8_good.png]]

#+CAPTION: Введено число с остатком
[[./img/Z1_8_bad.png]]

** Перевод температуры

*** Описание

Входные данные: температура по Фаренгейту не ниже абсолютного нуля.

Выходные данные: температура по Цельсию и обратный её перевод в шкалу
Фаренгейта.

Исключительные ситуации отсутствуют. Абсолютный нуль равен
-459.67^{\circ}F[fn:1].

[fn:1]
[[https://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D0%BE%D0%BB%D1%8E%D1%82%D0%BD%D1%8B%D0%B9_%D0%BD%D1%83%D0%BB%D1%8C_%D1%82%D0%B5%D0%BC%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D1%8B]]

*** Использованные формулы

Из условия:

\[t_C = \frac{5}{9} \cdot (t_F - 32^{\circ})\]

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_9.png
start
repeat
:Ввод tF;
repeat while (tF ниже\nабсолютного нуля?) is (да)
->нет;
:Перевод tF -> tC;
:Вывод tC;
:Проверка tC -> tF;
:Вывод tF;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_9.cpp src cpp

*** Пример работы программы

#+CAPTION: Сначала введён некорректный параметр, затем - корректный
[[./img/Z1_9.png]]

** Координата тела, брошенного под углом к горизонту

*** Описание

Входные данные: угол \alpha в градусах, начальная скорость тела V_0 в
м/с и момент времени t в с.

Выходные данные: координата тела (x и y) в момент времени t.

Исключительные ситуации отсутствуют. $t \ge 0$, потому что $t = 0$ -
начало. $V_0 > 0$. $0^{\circ} \le \alpha \le 360^{\circ}$

*** Используемые формулы

\[x = x_0 + V_0 t \cdot \cos{\alpha}\]

\[y = y_0 + V_0 t \cdot \sin{\alpha} - \frac{gt^2}{2}\]

\[\alpha_r = \frac{\alpha_d \cdot \pi}{180^{\circ}}\]

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_10.png
start
repeat
:Ввод a, V0 и t;
repeat while (V0 > 0 и t >= 0\nи a >= 0 и a <= 360?) is (нет)
->да;
:Перевод a в рад.;
:Вычисление x и y;
:Вывод координат;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_10.cpp src cpp

*** Пример работы программы

#+CAPTION: \alpha = 45^{\circ}; V_0 = 5; t = 0
[[./img/Z1_10_starting.png]]

#+CAPTION: Проверка: \alpha = 30^{\circ}; V_0 = 10; t = 1
[[./img/Z1_10_correct.png]]

#+CAPTION: Ввод некорректных параметров
[[./img/Z1_10_incorrect.png]]

** Средняя скорость движения тела

*** Описание

Входные данные: расстояния S_1 и S_2 и время, за которое пройдены телом
эти два расстояния - t_1 и t_2.

Выходные данные: средняя скорость движения тела на всём пути.

Исключительных ситуаций нет. Расстояние и время не могут быть
отрицательными или равными нулю.

*** Используемые формулы

В формулу скорости:

\[V = \frac{S}{t}\]

Подставляем весь путь $S = S_1 + S_2$ и всё время $t = t_1 + t_2$:

\[V = \frac{S_1 + S_2}{t_1 + t_2}\]

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_11.png
start
repeat
:Ввод S1, t1, S2 и t2;
repeat while (S1 > 0 и t1 > 0\nи S2 > 0 и t2 > 0?) is (нет)
->да;
:Расчёт средней скорости;
:Вывод;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_11.cpp src cpp

*** Пример работы программы

#+CAPTION: Введены некорректные данные
[[./img/Z1_11_bad.png]]

#+CAPTION: S1 = 10; t1 = 5; S2 = 20; t2 = 15
[[./img/Z1_11_good.png]]

#+CAPTION: Проверка: S1 = 60; t1 = 1.5; S2 = 100; t2 = 2
[[./img/Z1_11_check.png]]

** Высота орбиты спутника Земли

*** Описание

Входные данные: период обращения спутника T в секундах.

Выходные данные: высота орбиты спутника h в км.

Исключительные ситуации отсутствуют. T не может быть отрицательным или
равным нулю. При достаточно низких значениях T орбита становится ниже
радиуса Земли, о чём выводится отдельное сообщение.

*** Используемые формулы

По закону всемирного тяготения:

\[F = \gamma \frac{m_1 m_2}{r^2}\]

Где $\gamma = 6.67 \cdot 10^{-11} м^3 \cdot с^{-2} \cdot кг^{-1}$, m_1 и
m_2 - массы двух тел и r - расстояние между ними.

Масса одного из тел (Земли) и расстояние до спутника нам известны:

\[F = \gamma \frac{M m}{(R + h)^2}\]

Вместо F подставим центробежную силу:

\[m \omega^2 (R + h) = \gamma \frac{M m}{(R + h)^2}\]

Выразим \omega через T ($\omega = 2\pi \nu = \frac{2\pi}{T}$) и поделим
обе части на m:

\[\frac{4 \pi^2 (R + h)}{T^2} = \gamma \frac{M}{(R + h)^2}\]

Домножим обе части на T^2 и $(R + h)^2$ и поделим на 4\pi^2:

\[(R + h)^3 = \frac{\gamma M T^2}{4 \pi^2}\]

Возьмём кубический корень и выразим h:

\[h = \Bigl(\frac{\gamma M T^2}{4 \pi^2}\Bigr)^{1/3} - R\]

*** Блок-схема

#+BEGIN_SRC plantuml :file tmp/Z1_12.png
start
repeat
:Ввод T;
repeat while (T > 0?) is (нет)
->да;
:Вычисление h;
:Вывод;
stop
#+END_SRC

*** Программная реализация

#+INCLUDE: Z1_11.cpp src cpp

*** Пример работы программы

#+CAPTION: Слишком высокий период обращения
[[./img/Z1_12_underground.png]]

#+CAPTION: Некорректный ввод данных
[[./img/Z1_12_bad.png]]

#+CAPTION: T = 6000 с
[[./img/Z1_12_good.png]]

#+CAPTION: Проверка: T = 1.5 ч = 5400 с
[[./img/Z1_12_check.png]]

* Список литературы

1. Кузнецов, С.И. Справочник по физике: учебное пособие / С.И. Кузнецов,
   К.И. Рогозин - Томский политехнический университет - URL:
   [[https://znanium.com/catalog/document?id=159322]] - Текст: электронный.
